import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow'
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${ project.minecraft_version }"
    mappings "net.fabricmc:yarn:${ project.yarn_mappings }:v2"
    modImplementation "net.fabricmc:fabric-loader:${ project.loader_version }"

    api project(':stylish-api')
    implementation 'net.kyori:adventure-api:4.11.0'
    implementation 'net.kyori:adventure-text-minimessage:4.11.0'
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

shadowJar {
    archiveClassifier.set("all-dev")

    dependencies {
        include(dependency(':stylish-api'))
        include(dependency('net.kyori:adventure.*'))
    }
}

tasks.build.dependsOn tasks.shadowJar

task remapShadowJar(type: RemapJarTask, dependsOn: shadowJar) {
    inputFile = shadowJar.archiveFile
    archiveFileName = shadowJar.archiveFileName.get().replaceAll("-dev\\.jar\$", ".jar")
    addNestedDependencies = true
}

tasks.assemble.dependsOn tasks.remapShadowJar
